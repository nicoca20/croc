#ifndef PULSER_H
#define PULSER_H

#include "pulser_core_reg_defs.h" // autogenerated registers
#include "pulser_general_reg_defs.h" // autogenerated registers

#ifdef __cplusplus
extern "C"
{
#endif

#define PULSER_OFFSET_PER_ID 0x20
#define N_PULSERS 8

    //------------------------------------------------------------------------------
    // Bitfield helper type and inline functions (declarations only, no implementation)
    //------------------------------------------------------------------------------

    typedef struct
    {
        uint32_t mask; // Bitmask for the field within a 32-bit register
        uint8_t index; // Bit position (offset) of the field
    } bitfield_field32_t;

    uint32_t bitfield_get_field32(bitfield_field32_t field, uint32_t reg);
    uint32_t bitfield_set_field32(bitfield_field32_t field, uint32_t reg, uint32_t value);

    //------------------------------------------------------------------------------
    // Pulser types
    //------------------------------------------------------------------------------

    typedef struct
    {
        int f1_end;
        int f1_switch;
        int f2_end;
        int f2_switch;
        int f1_count;
        int f2_count;
        int stop_count;
        int invert_out;
        int idle_high;
    } pulser_settings_t;

    typedef enum
    {
        IDLE = 0,
        RUN_F1 = 1,
        RUN_F2 = 2,
        RUN_STOP = 3,
        DONE = 4
    } state_pulser_t;

    typedef enum
    {
        PULSER_0 = 0,
        PULSER_1 = 1,
        PULSER_2 = 2,
        PULSER_3 = 3,
        PULSER_4 = 4,
        PULSER_5 = 5,
        PULSER_6 = 6,
        PULSER_7 = 7
    } pulser_id_t;

    //------------------------------------------------------------------------------
    // Pulser function prototypes
    //------------------------------------------------------------------------------

    void pulser_set_values(pulser_id_t id, const pulser_settings_t *settings);
    void pulser_config(pulser_id_t id, const pulser_settings_t *settings);
    void pulser_en(int pulser_to_en);
    void pulser_dis(int pulser_to_dis);
    void pulser_disable_all_after_done(void);
    void pulser_start(int pulser_to_start);
    void pulser_stop(int pulser_to_stop);

    void pulser_set_f1_end_switch(pulser_id_t id, int endvalue, int switchvalue);
    void pulser_set_f2_end_switch(pulser_id_t id, int endvalue, int switchvalue);
    void pulser_set_f1_f2_stop_count(pulser_id_t id, int n_f1, int n_f2, int n_stop);

    int pulser_read_f1_end(pulser_id_t id);
    int pulser_read_f1_switch(pulser_id_t id);
    int pulser_read_f2_end(pulser_id_t id);
    int pulser_read_f2_switch(pulser_id_t id);
    int pulser_read_count(pulser_id_t id);
    int pulser_read_status(pulser_id_t id);
    int pulser_ready(pulser_id_t id);
    state_pulser_t get_pulser_fsm_state(pulser_id_t id);

#ifdef __cplusplus
} // extern "C"
#endif

#endif // PULSER_H